[["index.html", "Dasar Scientific Computing Menggunakan Bahasa R Pendahuluan", " Dasar Scientific Computing Menggunakan Bahasa R Fahri Aditia 2023-02-13 Pendahuluan Puji, syukur, dan terima kasih kepada Tuhan Yesus Kristus, yang telah menjadi tempat sandaran selama penulisan buku ini. Oleh karena berkat dan kuasa-Nya sajalah, penulis dapat menyelesaikan buku yang berjudul Dasar Scientific Computing Menggunakan Bahasa R. Selama pembuatan buku ini, banyak kesulitan yang penulis hadapi, namun atas tuntunan Tuhan Yesus penulis dapat menyelesaikannya. Penulis menyadari apabila dalam penyusunan buku ini terdapat kekurangan, tetapi penulis meyakini bahwa sekecil apapun buku ini pasti akan tetap memberikan manfaat. Akhir kata guna penyempurnaan buku ini kritik dan saran dari pembaca sangat penulis nantikan. Pembaca bisa mengunjungi link yang ada di bawah ini untuk menyampaikan kritik dan saran. https://docs.google.com/forms/u/2/d/1eOKL56Hbpr64Z-C2ib2-3H__rj3gpVP8hl-SEvw8CNY "],["mengenal-bahasa-r.html", "Chapter 1 Mengenal Bahasa R 1.1 Instalasi R dan R Studio 1.2 Hello, World! 1.3 Mengenal Operator dan Tipe Data", " Chapter 1 Mengenal Bahasa R R merupakan bahasa pemrograman yang biasa digunakan untuk analisis statistika dan grafik. R sendiri dibuat pertama kali oleh Ross Ihaka dan Robert Gentleman di Universitas Auckland, Selandia Baru dan dirilis pertama kali pada tahun 1993. Sampai saat ini dikembangkan oleh R Development Core Team. Nama R diambildari huruf pertama dari nama dua pembuatnya, yakni Ross Ihaka dan Robert Gentleman. R merupakan bahasa pemrograman yang sangat powerful terutama ketika ingin melakukan komputasi statistika karena didalamnya sudah terdapat fungsi  fungsi yang mendukung kegiatan tersebut. R juga bisa melakukan Analisis Data, Visualisasi Data dan hal - hal lainnya yang berikaitan dengan dunia data. 1.1 Instalasi R dan R Studio 1.1.1 Instalasi R Kunjungi https://cran.r-project.org/bin/windows/base/ untuk mengunduh software r. Buka file yang sudah kamu unduh tadi yang mana akan muncul tampilan seperti berikut. Pilih bahasa yang ingin atau akan kamu gunakan pada instalasi ini, lalu klik OK untuk melanjutkan. Lalu kamu akan diarahkan kebagian selanjutnya, cukup tekan next untuk melanjutkan. Klik Next untuk melanjutkan. Klik Next (lagi) untuk melanjutkan. Klik Next (lagi) untuk melanjutkan. Klik Next (lagi) untuk melanjutkan. Klik finish untuk menyelesaikan instalasi. 1.1.2 Instalasi R Studio Kunjungi https://posit.co/download/rstudio-desktop/ untuk mengunduh software r studio. Buka file yang sudah kamu unduh tadi yang mana akan muncul tampilan seperti berikut. Jika sudah muncul seperti tampilan yang ada pada gambar diatas klik next untuk melanjutkan. Lalu klik next lagi untuk melanjutkan. Lalu klik install untuk melakukan instalasi. Selanjutnya kamu akan diarahkan kebagian Completing R Studio Setup, klik finish, maka sekarang R Studio sudah terinstall di perangkat mu. 1.2 Hello, World! Dalam bahasa r untuk menampilkan tulisah Hello, World! kita bisa menuliskan kode seperti pada contoh berikut. &gt; print(&quot;Hello, World!&quot;) [1] &quot;Hello, World!&quot; 1.2.1 Menulis dan Menjalankan Kode Program Bahasa R Untuk menuliskan dan menjalankan kode program bahasa r terutama dengan r studio terdapat dua cara. Dua cara tersebut yaitu menggunakan r script dan r console. 1.2.1.1 Membuat R Script Untuk membuat r script klik pada bagian kiri atas software r studio yang bertuliskan file lalu klik pada new file dan pilih opsi r script. Selanjutnya akan muncul tampilan seperti berikut. Berikut adalah contoh penulisan kode program r dalam r script. Untuk menyimpan r script klik tombol yang berbentuk seperti disket pada bagian atas kanan software r studio. Untuk menjalankan r script klik pada tombol yang bertuliskan run pada bagian tengah atas software r studio. Output dari kode program pada r script akan ditampilkan pada r console yang ada pada bagian kiri bawah software r studio. 1.2.1.2 Menggunakan R Console Pada saat membuka software r studio pada bagian kiri bawah terdapat suatu bagian yang disebut dengan r console. Dengan menggunakan R Console kita bisa menuliskan dan menampilkan kode program r secara cepat. Berikut adalah contoh penuliskan kode program pada r console. Untuk menampilkan kode program klik enter setelah menuliskan kode programnya. 1.3 Mengenal Operator dan Tipe Data 1.3.1 Operator Operator merupakan simbol - simbol yang digunakan untuk melakukan operasi. Operasi yang dimaksud adalah operasi seperti operasi aritmatika, operasi assignment variabel dan sebagainya. Operator terdiri atas dua jenis yaitu operasi perbandingan dan operasi logika. 1.3.1.1 Operator Perbandingan Simbol Keterangan = Sama Dengan != Tidak Sama Dengan &gt; Lebih Dari &lt; Kurang Dari &gt;= Lebih Dari Sama Dengan &lt;= Kurang Dari Sama Dengan 1.3.1.2 Operator Logika Simbol Keterangan &amp; AND | OR ! NEGASI "],["variabel-dan-vektor.html", "Chapter 2 Variabel dan Vektor 2.1 Mengenal dan Membuat Variabel 2.2 Mengenal dan Membuat Vektor", " Chapter 2 Variabel dan Vektor 2.1 Mengenal dan Membuat Variabel 2.1.1 Apa itu Variabel? Variabel merupakan tipe data yang dapat digunakan untuk menampung suatu nilai. Variabel tidak dapat menampung lebih dari satu nilai. Nilai - nilai yang terdapat pada sebuah variabel bisa diisi dengan tipe data seperti integer, string atau tipe data lainnya. Variabel juga dapat memiliki nilai yang berupa variabel lain yang dimana ketika ditampilkan akan muncul output berupa nilai dari variabel lain. Pada bahasa r, ada beberapa aturan dalam penamaan dari sebuah variabel. Aturan - aturan tersebut diantara lain adalah sebagai berikut. Nama variabel Tidak boleh diawali dengan angka Nama variabel harus diawali dengan huruf atau underscore 2.1.2 Mendelkarasikan dan Menampilkan Variabel Untuk mendeklarasikan variabel kita cukup menuliskan nama variabelnya lalu diikuti dengan tanda = serta diikuti juga dengan nilai yang akan ada pada variabel tersebut. Berikut adalah contoh penggunaannya. Untuk menampilkan variabel sendiri kita bisa menggunakan fungsi print(). Penjelasan mengenai fungsi akan dibahas pada bab - bab selanjutnya, untuk saat ini cukup ikuti saja apa yang dijelaskan pada bab ini. &gt; nama_variabel = 123 &gt; print(nama_variabel) [1] 123 Selain menggunakan tanda =, dalam bahasa r kita juga menggunakan tanda &lt;, &lt;-, -&gt;, dan &gt; untuk melakukan assignment variabel terhadap nilai atau valuenya. Tanda &lt;, &lt;-, -&gt;, dan &gt; hanya digunakan ketika sebuah variabel memiliki nilai yang berupa fungsi. 2.2 Mengenal dan Membuat Vektor 2.2.1 Apa itu Vektor? Vektor merupakan tipe data yang dapat menampung banyak nilai, nilai ini berupa nilai vektor yang dapat diilustrasikan seperti berikut. \\[ \\begin{pmatrix}1\\\\ 2\\\\ 3\\\\ 4\\\\\\end{pmatrix} \\] Dalam matematika vektor merupakan matriks yang hanya memiliki satu kolom saja. Nilai - nilai dalam vektor akan ditampilkan secara linear didalam sebuah variabel seperti pada contoh berikut. &gt; x = 1234 &gt; print(x) [1] 1234 2.2.2 Membuat dan Menampilkan Vektor Untuk membuat sebuah vektor kita bisa menggunakan fungsi c(). fungsi tersebut akan berisi nilai dari sebuah vektor, seperti pada contoh berikut. &gt; x &lt;- c(1,2,3,4) &gt; print(x) [1] 1 2 3 4 "],["matriks.html", "Chapter 3 Matriks 3.1 Membuat Matriks 3.2 Operasi Aritmatika Pada Matriks 3.3 Transpose Matriks 3.4 Determinan Matriks 3.5 Adjoint Matriks 3.6 Invers Matriks 3.7 Solusi Persamaan Linear Dengan Matriks", " Chapter 3 Matriks Dalam matematika, matriks merupakan susunan bilangan, simbol, atau ekspresi yang disusun dalam baris dan kolom sehingga membentuik bangun persegi yang disebut dengan istilah ordo. Berdasarkan definisinya, matriks dapat dijabarkan menjadi seperti berikut. \\[\\begin{bmatrix}a_{11} &amp;a_{12} &amp;a_{13} \\\\ a_{21} &amp;a_{22} &amp;a_{23} \\\\ a_{31} &amp;a_{32} &amp;a_{33} \\end{bmatrix}\\] Matriks diatas bisa disebut juga matriks dengan matriks ordo 3x3, karena memiliki 3 baris dan 3 kolom. Dalam Bahasa R terutama dalam software R Studio sebuah matriks akan ditampilkan seperti berikut. [,1] [,2] [,3] [1,] 11 12 31 [2,] 12 22 32 [3,] 13 32 33 3.1 Membuat Matriks Untuk membuat sebuah matriks kita bisa menggunakan fungsi matrix(). Berikut adalah format penulisan matrix. Untuk lebih jelasnya berikut adalah contoh penerapan fungsi matrix(). &gt; x &lt;- matrix(c(1:9), 3, 3) &gt; x [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 Pada contoh diatas dapat dipahami bahwa dalam membuat sebuah matriks kita harus menggunakan fungsi matrix yang didalamnya nanti akan terdapat data yang akan ditampilkan serta berapa jumlah baris dan kolom tersebut sehingga data - data yang ada pada matrix nantinya bisa dibagi beberapa bagian sesuai dengan berapa banyak jumlah baris dan kolomnya. Pada contoh diatas penulis menggunakan range angka 1 sampai 9 yang akan menghasilkan angka berupa angka 1 sampai dengan 9 sebagai data yang akan ditampilkan serta mengatur jumlah baris dan kolomnya masing - masing 3. Contoh diatas akan membentuk sebuah matriks yang memiliki ordo 3x3. 3.2 Operasi Aritmatika Pada Matriks Pada bagian ini akan dibahas mengenai bagaimana melakukan operasi matriks dengan bahasa r. Bahasannya akan meliputi operasi penjumlahan, operasi pengurangan, operasi perkalian, dan operasi pembagian. 3.2.1 Operasi Penjumlahan Untuk melakukan operasi penjumlahan matriks, kita cukup menjumlahkan matriks a dan matriks b dengan syarat matriks yang akan kamu jumlahkan berada didalam sebuah variabel, contoh: A + B. Tapi sebelum mengenal lebih jauh mengenai operasi penjumlahan pada matriks, akan lebih baik mengetahui skema perhitungan dari sebuah matriks terlebih dahulu. \\[ A_{} = \\begin {bmatrix} 1&amp;3 \\\\ 2&amp;4 \\end{bmatrix} + B = \\begin{bmatrix}5 &amp; 6\\\\ 7 &amp; 8\\end{bmatrix} = \\begin{bmatrix}1 + 5 &amp; 2 + 6\\\\ 3 + 7 &amp; 4 + 8\\end{bmatrix} = \\begin{bmatrix}6 &amp; 8\\\\ 10 &amp; 12\\end{bmatrix} \\] Dalam menjumlahkan matriks yang dijumlahkan adalah masing - masing elemen matriks tersebut dengan syarat yakni ordonya tidak boleh beda atau harus sama. Berikut adalah contoh penjumlahan matriks dengan menggunakan bahasa r. &gt; x &lt;- matrix(c(1:9), 3, 3) &gt; y &lt;- matrix(c(10:19), 3, 3) Warning in matrix(c(10:19), 3, 3): data length [10] is not a sub-multiple or multiple of the number of rows [3] &gt; z = x + y &gt; print(z) [,1] [,2] [,3] [1,] 11 17 23 [2,] 13 19 25 [3,] 15 21 27 Dari contoh diatas dapat disimpulkan bahwa untuk menjumlahkan matriks dalam bahasa r kita hanya perlu menyimpan matrix a dan matrix b kedalam sebuah variabel lalu menjumlahkan kedua variabel tersebut dengan menggunakan operator penjumlahan. Dalam melakukan operasi pengurangan matriks yang dijumlahkan adalah masing - masing elemen matriks tersebut dengan syarat yakni ordonya tidak boleh beda atau harus sama. Berikut adalah contoh penjumlahan matriks dengan menggunakan bahasa r. 3.2.2 Operasi Pengurangan Untuk melakukan operasi penjumlahan matriks, kita cukup mengurangkan matriks a dan matriks b atau matriks b dengan matriks a, dengan syarat matriks yang akan kamu jumlahkan berada didalam sebuah variabel, contoh: B - A. Tapi sebelum mengenal lebih jauh mengenai operasi pengurangan pada matriks, akan lebih baik mengetahui skema perhitungan dari sebuah matriks terlebih dahulu. \\[ B_{} = \\begin {bmatrix} 5&amp;6 \\\\ 7&amp;8 \\end{bmatrix} - A = \\begin{bmatrix}1 &amp; 2\\\\ 3 &amp; 4\\end{bmatrix} = \\begin{bmatrix}1 - 5 &amp; 2 - 6\\\\ 3 - 7 &amp; 4 - 8\\end{bmatrix} = \\begin{bmatrix}4 &amp; 4\\\\ 4 &amp; 4\\end{bmatrix} \\] Dari contoh diatas dapat disimpulkan bahwa untuk menjumlahkan matriks dalam bahasa r kita hanya perlu menyimpan matrix a dan matrix b kedalam sebuah variabel lalu menjumlahkan kedua variabel tersebut dengan menggunakan operator penjumlahan. Dari contoh diatas dapat disimpulkan bahwa dalam melakukan operasi pengurangan pada matriks, yang kita kurangkan adalah masing  masing elemen matriks tersebut, syarat utama daripada pengurangan matriks ialah ordonya tidak boleh beda atau harus sama . Berikut adalah contoh pengurangan matriks dengan menggunakan bahasa r . A &lt;- c(1, 2, 3, 4) Matrix_A &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) B &lt;- c(5,6,7,8) Matrix_B &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) Matrix_A [,1] [,2] [,1] 1 2 [,2] 3 4 Matrix_B [,1] [,2] [,1] 5 6 [,2] 7 8 Matrix_B - Matrix_A [,1] [,2] [,1] 4 4 [,2] 4 4 Operasi Perkalian Untuk melakukan operasi perkalian matriks, kamu cukup mengalikan matriks a dan matriks b ataupun sebaliknya akan tetapi harus memakai tanda % setelah nama variabel untuk variabel a dan tanda % sebelum variabel b dan ditengah  tengah tanda % baru diselipkan tanda kali  seperti pada contoh berikut : matrix_A%%matrix_B, dengan syarat matriks yang akan kamu jumlahkan berada didalam sebuah variabel . Tapi sebelum mengenal lebih jauh mengenai operasi perkalian pada matriks, akan lebih baik mengetahui terlebih dahulu skema dari perkalian matriks secara matematis . A=[( 1&amp;2 @ 3&amp;4 )]×B=[( 5&amp;6 @ 7&amp;8 )]=[ ((1×5)+(2×7)&amp;(1×6)+(2×8)@(3×5)+(3×7)&amp;(3×6)+(3×8)) ]=[ (19&amp;22@43&amp;50) ] Dari contoh diatas dapat disimpulkan bahwa dalam megalikan matriks, berlaku aturan kolom dikali baris seperti yang dapat dilihat pada contoh dimana 1 pada matriks a dikalikan dengan 5 pada matriks b dan 2 dikalikan 7 yang mana bisa disebut dengan kolom (matriks a) dikalikan baris (matriks b) . Berikut akan diberikan contoh perkalian matriks dengan menggunakan bahasa r . A &lt;- c(1, 2, 3, 4) Matrix_A &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) B &lt;- c(5,6,7,8) Matrix_B &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) Matrix_A [,1] [,2] [,1] 1 2 [,2] 3 4 Matrix_B [,1] [,2] [,1] 5 6 [,2] 7 8 Matrix_A%*%Matrix_B [,1] [,2] [,1] 19 22 [,2] 43 50 Operasi Pembagian Untuk melakukan operasi penjumlahan matriks, kamu cukup menambahkan matriks a dan matriks b, dengan syarat matriks yang akan kamu jumlahkan berada didalam sebuah variabel, contoh : A + B . Tapi sebelum mengenal lebih jauh mengenai operasi penjumlahan pada matriks, akan lebih baik mengetahui skema perhitungan dari sebuah matriks . A=[( 1&amp;2 @ 3&amp;4 )]+B=[( 5&amp;6 @ 7&amp;8 )]=[ (1+5&amp;2+6@3+7&amp;4+8) ]=[ (6&amp;8@10&amp;12) ] Dari contoh diatas dapat disimpulkan bahwa dalam menjumlahkan matriks, yang kita jumlahkan adalah masing  masing elemen matriks tersebut, syarat utama daripada penjumlahan matriks ialah ordonya tidak boleh beda atau harus sama . Berikut akan diberikan contoh penjumlahan matriks dengan menggunakan bahasa r .] A &lt;- c(1, 2, 3, 4) Matrix_A &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) B &lt;- c(5,6,7,8) Matrix_B &lt;- matrix(A, nrow = 2, ncol = 2, byrow = TRUE) Matrix_A [,1] [,2] [,1] 1 2 [,2] 3 4 Matrix_B [,1] [,2] [,1] 5 6 [,2] 7 8 Matrix_A / Matrix_B [,1] [,2] [,1] 0.2000000 0.3333333 [,2] 0.4285714 0.5000000 3.3 Transpose Matriks 3.3.1 Apa itu Transpose Matriks? Transpose adalah ketika pada sebuah matriks dilakukan pertukaran antara dimensi kolom dan barisnya. Contoh Transpose Matriks: Sebelum Di Transpose: \\(\\begin{pmatrix} 55 &amp; 105 &amp; 45\\\\ 87 &amp; 64 &amp; 28 \\end{pmatrix}\\) Setelah Di Transpose: \\(\\begin{bmatrix} 55 &amp; 87\\\\ 105 &amp; 64\\\\ 45 &amp; 28 \\end{bmatrix}\\) 3.3.2 Membuat Transpose Matriks Untuk melakukan transpose matriks kita bisa menggunakan fungsi t(). Contoh penggunaannya adalah sebagai berikut. &gt; transpose &lt;- matrix(c(55, 105, 45, 87, 64, 28), 2, 3) &gt; t(transpose) [,1] [,2] [1,] 55 105 [2,] 45 87 [3,] 64 28 3.4 Determinan Matriks 3.4.1 Apa itu Determinan Matriks? Dalam Aljabar Linear, determinan adalah nilai yang dapat dihitung dari unsur suatu matriks persegi. Determinan matriks A ditulis dengan tanda det, det A, atau | A |. Determinan dapat dianggap sebagai faktor pengskalaan transformasi yang digambarkan oleh matriks. Determinan Matriks sendiri dirumuskan sebagai berikut. \\(\\begin{vmatrix}\\;A\\;\\end{vmatrix}=\\begin{vmatrix}\\;a &amp; \\;c\\;\\\\ \\;b &amp; \\;d\\; \\end{vmatrix}= a\\cdot d - b \\cdot c\\) Contoh: \\(\\begin{vmatrix}\\;A\\;\\end{vmatrix}=\\begin{vmatrix}\\;1 &amp; \\;2\\;\\\\ \\;3 &amp; \\;4\\; \\end{vmatrix}= 1\\cdot 4 - 2 \\cdot 3 = -2\\) Contoh diatas adalah contoh pengaplikasian rumus determinan yaitu a.d-b.c terhadap matriks dengan ordo 2x2, bagaimana dengan ordo 3x3? Untuk mencari determinan dari matriks 3x3 ada banyak cara atau metode. Pada buku ini penulis akan menggunakan metode sarrus sebagai contoh. Metode sarrus disebut juga dengan metode anyaman, penulis sendiri menyebutnya sebagai metode silang karena pada metode sarrus ini kita akan menyilang matriks 3x3 dengan pola silang sebagai berikut. Berikut adalah contoh penggunaan dari metode sarrus. \\[\\begin{vmatrix} \\;a &amp; b &amp; c\\;\\\\ \\;d &amp; e &amp; f\\;\\\\ \\;g &amp; h &amp; i\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; b \\\\ \\;d &amp; e \\\\ \\;g &amp; h \\end{matrix}\\] \\[ \\Rightarrow Silang \\;Pertama \\rightarrow a.e.i\\;\\begin{vmatrix} \\;\\textbf{a} &amp; b &amp; c\\;\\\\ \\;d &amp; \\textbf{e} &amp; f\\;\\\\ \\;g &amp; h &amp; \\textbf{i}\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; b \\\\ \\;d &amp; e \\\\ \\;g &amp; h \\end{matrix} \\] \\[ \\Rightarrow Silang \\;Kedua \\rightarrow b.f.g\\;\\begin{vmatrix} \\;a &amp; \\textbf{b} &amp; c\\;\\\\ \\;d &amp; e &amp; \\textbf{f}\\;\\\\ \\;g &amp; h &amp; i\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; b \\\\ \\;d &amp; e \\\\ \\;\\textbf{g} &amp; h \\end{matrix} \\] \\[ \\Rightarrow Silang \\;Ketiga \\rightarrow c.d.h\\;\\begin{vmatrix} \\;a &amp; b &amp; \\textbf{c}\\;\\\\ \\;d &amp; e &amp; f\\;\\\\ \\;g &amp; h &amp; i\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; b \\\\ \\;\\textbf{d} &amp; e \\\\ \\;g &amp; \\textbf{h} \\end{matrix} \\] \\[ \\Rightarrow Silang \\;Keempat \\rightarrow c.e.g\\;\\begin{vmatrix} \\;a &amp; b &amp; \\textbf{c}\\;\\\\ \\;d &amp; \\textbf{e} &amp; f\\;\\\\ \\;\\textbf{g} &amp; h &amp; i\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; b \\\\ \\;d &amp; e \\\\ \\;g &amp; h \\end{matrix} \\] \\[ \\Rightarrow Silang \\;Kelima \\rightarrow a.f.h\\;\\begin{vmatrix} \\;a &amp; b &amp; c\\;\\\\ \\;d &amp; \\;e &amp; \\textbf{f}\\;\\\\ \\;g &amp; \\textbf{h} &amp; i\\; \\end{vmatrix}\\begin{matrix} \\;\\textbf{a} &amp; b \\\\ \\;d &amp; e \\\\ \\;g &amp; h \\end{matrix} \\] \\[ \\Rightarrow Silang \\;Keenam \\rightarrow b.d.i\\;\\begin{vmatrix} \\;a &amp; b &amp; c\\;\\\\ \\;d &amp; \\;e &amp; f\\;\\\\ \\;g &amp; h &amp; \\textbf{i}\\; \\end{vmatrix}\\begin{matrix} \\;a &amp; \\textbf{b} \\\\ \\;\\textbf{d} &amp; e \\\\ \\;g &amp; h \\end{matrix} \\] Pola silang pada contoh diatas jika dimasukkan kedalam rumus determinan akan menjadi seperti berikut. \\[ (a.e.i+b.f.g+c.d.h)-(c.e.g+a.f.h+b.d.i) \\] Berikut adalah contoh pengaplikasian rumus diatas pada matriks ordo 3x3: \\[ x = \\begin{bmatrix} \\;3 &amp; \\;2\\; &amp; 1\\;\\\\ \\;0 &amp; \\;-1\\; &amp; 5\\;\\\\ \\;-2 &amp; \\;-3\\; &amp; 2\\; \\end{bmatrix}\\\\ \\\\ \\begin{vmatrix} \\;x\\; \\end{vmatrix} = \\begin{vmatrix} \\;3 &amp; \\;2\\; &amp; 1\\;\\\\ \\;0 &amp; \\;-1\\; &amp; 5\\;\\\\ \\;-2 &amp; \\;-3\\; &amp; 2\\; \\end{vmatrix}\\begin{matrix} \\;3 &amp;\\; 2\\\\ \\;0 &amp;\\; -1\\\\ \\;-2 &amp;\\; -3 \\end{matrix}\\\\ \\\\ = (3.-1.2+2.5.2+1.0.-3)-(1.-1.-2+3.5.-3+2.0.2)\\\\ \\\\ = (-6+(-20)+0)-(2+(-45)+0)=(-26)-(-43)\\\\ = 17 \\] 3.4.2 Determinan Matriks Dalam Bahasa R Untuk menentukan determinan dari sebuah matriks di bahasa r kita bisa menggunkan fungsi det(), berikut adalah contoh penggunaannya. &gt; x &lt;- matrix(c(3, 2, 1, 0, -1, 5, -2, -3, 2), 3, 3) &gt; det(x) [1] 17 3.5 Adjoint Matriks 3.5.1 Apa itu Adjoint Matriks? Adjoint matriks merupakan transpose dari suatu matriks yang elemen  elemennya merupakan kofaktor dari elemen  elemen matriks tersebut. Untuk menentukan adjoin dari sebuah matriks digunakan beberapa, cara ini bisa digunakan untuk mencari adjoin matriks dengan ordo 2x2. \\[ adj\\begin{bmatrix} \\;a &amp; b\\;\\\\ \\;c &amp; d\\; \\end{bmatrix} \\rightarrow\\; \\begin{bmatrix} \\;d &amp; -b\\;\\\\ \\;-c &amp; a\\; \\end{bmatrix}\\\\ \\\\ adj\\begin{bmatrix} \\;1 &amp; 2\\;\\\\ \\;3 &amp; 4\\; \\end{bmatrix} \\rightarrow\\; \\begin{bmatrix} \\;4 &amp; -2\\;\\\\ \\;-3 &amp; 1\\; \\end{bmatrix} \\] Menentukan adjoin matriks dengan ordo 2x2 tidak begitu sulit seperti yang dapat kamu lihat pada contoh diatas, berikutnya saya akan menjelaskan bagimana mencari adjoin untuk matriks dengan ordo 3x3. Berikut adalah contoh bagaiman menentukan adjoint matriks. \\[ \\begin{bmatrix} \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix}\\\\ \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix}\\\\ \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; i\\; \\end{bmatrix} \\end{bmatrix} \\] Dari pola diatas kita akan mencari harga minornya dengan cara: \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(a_{11}\\): elemen matriks baris 1 kolom 2 elemen matriks baris 1 kolom 3 elemen matriks baris 2 kolom 1 elemen matriks baris 3 kolom 1 sehingga didapat matriks baru yaitu: \\[\\begin{bmatrix} \\;e &amp; f\\;\\\\ \\;h &amp; i\\; \\end{bmatrix}\\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(b_{12}\\): \\[ \\begin{bmatrix} \\;d &amp; f\\;\\\\ \\;g &amp; i\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(c_{13}\\): elemen matriks baris 1 kolom 1 elemen matriks baris 1 kolom 3 elemen matriks baris 2 kolom 2 elemen matriks baris 3 kolom 2 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;d &amp; e\\;\\\\ \\;g &amp; h\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(d_{21}\\): elemen matriks baris 1 kolom 1 elemen matriks baris 1 kolom 2 elemen matriks baris 2 kolom 3 elemen matriks baris 3 kolom 3 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;b &amp; c\\;\\\\ \\;h &amp; i\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(e_{22}\\): elemen matriks baris 1 kolom 1 elemen matriks baris 2 kolom 2 elemen matriks baris 2 kolom 3 elemen matriks baris 3 kolom 1 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;a &amp; c\\;\\\\ \\;g &amp; i\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(f_{23}\\): elemen matriks baris 1 kolom 2 elemen matriks baris 2 kolom 1 elemen matriks baris 2 kolom 3 elemen matriks baris 3 kolom 2 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;a &amp; b\\;\\\\ \\;g &amp; h\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(g_{31}\\): elemen matriks baris 1 kolom 3 elemen matriks baris 2 kolom 1 elemen matriks baris 2 kolom 2 elemen matriks baris 3 kolom 3 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;b &amp; c\\;\\\\ \\;e &amp; f\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(h_{32}\\): elemen matriks baris 1 kolom 1 elemen matriks baris 2 kolom 3 elemen matriks baris 3 kolom 2 elemen matriks baris 3 kolom 3 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;a &amp; c\\;\\\\ \\;d &amp; f\\; \\end{bmatrix} \\] \\(\\Rightarrow\\) Mencoret elemen  elemen di \\(i_{33}\\): elemen matriks baris 1 kolom 2 elemen matriks baris 2 kolom 2 elemen matriks baris 3 kolom 1 elemen matriks baris 3 kolom 3 sehingga didapat matriks baru yaitu: \\[ \\begin{bmatrix} \\;a &amp; b\\;\\\\ \\;d &amp; e\\; \\end{bmatrix} \\] Berikut adalah bentuk lengkapnya, dimana elemen matriks yang berwarna hitam merupakan elemen yang dicoret sedang yang berwarana merah merupakan matriks baru yang terbentuk dari matriks yang dicoret. \\[ \\begin{bmatrix} \\begin{bmatrix} \\;\\begin{bmatrix} \\; a_{11} \\; \\end{bmatrix} &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;{\\color{Red} e}\\; &amp; {\\color{Red} f}\\;\\\\ \\;g &amp; \\;{\\color{Red} h}\\; &amp; {\\color{Red} i}\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;\\begin{bmatrix} \\; b_{12} \\; \\end{bmatrix}\\; &amp; c\\;\\\\ \\;{\\color{Red} d} &amp; \\;e\\; &amp; {\\color{Red} f}\\;\\\\ \\;{\\color{Red} g} &amp; \\;h\\; &amp; {\\color{Red} i}\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;a &amp; \\;b\\; &amp; \\begin{bmatrix} \\; c_{13} \\; \\end{bmatrix}\\;\\\\ \\;{\\color{Red} d} &amp; \\;{\\color{Red} e}\\; &amp; f\\;\\\\ \\;{\\color{Red} g} &amp; \\;{\\color{Red} h}\\; &amp; i\\; \\end{bmatrix}\\\\ \\begin{bmatrix} \\;a &amp; \\;{\\color{Red} b}\\; &amp; {\\color{Red} c}\\;\\\\ \\;\\begin{bmatrix} \\; d_{21} \\; \\end{bmatrix} &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;{\\color{Red} h}\\; &amp; {\\color{Red} i}\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;{\\color{Red} a} &amp; \\;b\\; &amp; {\\color{Red} c}\\;\\\\ \\;d &amp; \\;\\begin{bmatrix} \\; e_{22} \\; \\end{bmatrix}\\; &amp; f\\;\\\\ \\;{\\color{Red} g} &amp; \\;h\\; &amp; {\\color{Red} i}\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;{\\color{Red} a} &amp; \\;{\\color{Red} b}\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; \\begin{bmatrix} \\; f_{23} \\; \\end{bmatrix}\\;\\\\ \\;{\\color{Red} g} &amp; \\;{\\color{Red} h}\\; &amp; i\\; \\end{bmatrix}\\\\ \\begin{bmatrix} \\;a &amp; \\;{\\color{Red} b}\\; &amp; {\\color{Red} c}\\;\\\\ \\;d &amp; \\;{\\color{Red} e}\\; &amp; {\\color{Red} f}\\;\\\\ \\;\\begin{bmatrix} \\; g_{31} \\; \\end{bmatrix} &amp; \\;h\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;{\\color{Red} a} &amp; \\;b\\; &amp; {\\color{Red} c}\\;\\\\ \\;{\\color{Red} d} &amp; \\;e\\; &amp; {\\color{Red} f}\\;\\\\ \\;g &amp; \\;\\begin{bmatrix} \\; h_{32} \\; \\end{bmatrix}\\; &amp; i\\; \\end{bmatrix} &amp; \\begin{bmatrix} \\;{\\color{Red} a} &amp; \\;{\\color{Red} b}\\; &amp; c\\;\\\\ \\;{\\color{Red} d} &amp; \\;{\\color{Red} e}\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; \\begin{bmatrix} \\; i_{33} \\; \\end{bmatrix}\\; \\end{bmatrix} \\end{bmatrix} \\] \\[ \\Rightarrow a_{11} = \\begin{bmatrix} \\;{\\color{Red} e} &amp; {\\color{Red} f}\\;\\\\ \\;{\\color{Red} h} &amp; {\\color{Red} i}\\; \\end{bmatrix} \\\\ \\Rightarrow b_{12} = \\begin{bmatrix} \\;{\\color{Red} d} &amp; {\\color{Red} f}\\;\\\\ \\;{\\color{Red} g} &amp; {\\color{Red} i}\\; \\end{bmatrix} \\\\ \\Rightarrow c_{13} = \\begin{bmatrix} \\;{\\color{Red} d} &amp; {\\color{Red} e}\\;\\\\ \\;{\\color{Red} g} &amp; {\\color{Red} h}\\; \\end{bmatrix} \\\\ \\Rightarrow d_{21} = \\begin{bmatrix} \\;{\\color{Red} b} &amp; {\\color{Red} c}\\;\\\\ \\;{\\color{Red} h} &amp; {\\color{Red} i}\\; \\end{bmatrix} \\\\ \\Rightarrow e_{22} = \\begin{bmatrix} \\;{\\color{Red} a} &amp; {\\color{Red} c}\\;\\\\ \\;{\\color{Red} g} &amp; {\\color{Red} i}\\; \\end{bmatrix} \\\\ \\Rightarrow f_{23} = \\begin{bmatrix} \\;{\\color{Red} a} &amp; {\\color{Red} b}\\;\\\\ \\;{\\color{Red} g} &amp; {\\color{Red} h}\\; \\end{bmatrix} \\\\ \\Rightarrow g_{31} = \\begin{bmatrix} \\;{\\color{Red} b} &amp; {\\color{Red} c}\\;\\\\ \\;{\\color{Red} e} &amp; {\\color{Red} f}\\; \\end{bmatrix} \\\\ \\Rightarrow h_{32} = \\begin{bmatrix} \\;{\\color{Red} a} &amp; {\\color{Red} b}\\;\\\\ \\;{\\color{Red} d} &amp; {\\color{Red} f}\\; \\end{bmatrix} \\\\ \\Rightarrow i_{33} = \\begin{bmatrix} \\;{\\color{Red} a} &amp; {\\color{Red} b}\\;\\\\ \\;{\\color{Red} d} &amp; {\\color{Red} e}\\; \\end{bmatrix} \\] Setelah menentukan nilai minor, maka selanjutnya yang harus dilakukan adalah mentransformasikan nilai  nilai kedalam bentuk seperti berikut . penempatannya sendiri harus berurutan dimulai dari elemen  elemen yang ada di matrix a_11 sampai dengan i_33 seperti berikut. \\[ \\begin{bmatrix} \\;+\\; \\begin{vmatrix} \\;e &amp; f\\;\\\\ \\;h &amp; i\\; \\end{vmatrix} &amp; \\;-\\;\\begin{vmatrix} \\;d &amp; f\\;\\\\ \\;g &amp; i\\; \\end{vmatrix} &amp; \\;+\\;\\begin{vmatrix} \\;d &amp; e\\;\\\\ \\;g &amp; h\\; \\end{vmatrix}\\\\ \\;-\\;\\begin{vmatrix} \\;b &amp; c\\;\\\\ \\;h &amp; i\\; \\end{vmatrix} &amp; \\;+\\; \\begin{vmatrix} \\;a &amp; c\\;\\\\ \\;g &amp; i\\; \\end{vmatrix}&amp; \\;-\\;\\begin{vmatrix} \\;a &amp; b\\;\\\\ \\;g &amp; h\\;\\end{vmatrix}\\\\ \\;+\\; \\begin{vmatrix} \\;b &amp; c\\;\\\\ \\;e &amp; f\\; \\end{vmatrix} &amp; \\;-\\;\\begin{vmatrix} \\;g &amp; c\\;\\\\ \\;d &amp; f\\; \\end{vmatrix} &amp; \\;+\\;\\begin{vmatrix} \\;a &amp; b\\;\\\\ \\;d &amp; e\\; \\end{vmatrix} \\end{bmatrix} \\] Menetukan matriks kofaktor Selanjutnya adalah menetukan matriks kofaktornya dengan cara menghitung masing  masing determinan dari matriks yang sudah ditentukan kofaktornya sebelumnya sehingga menjadi: \\[ \\begin{bmatrix} \\;a_{11}\\; &amp; \\;b_{12}\\; &amp; \\;c_{13}\\; \\\\ \\;d_{21}\\; &amp; \\;e_{22}\\; &amp; \\;f_{23}\\;\\\\ \\;g_{31}\\; &amp; \\;h_{32}\\; &amp; \\;i_{33}\\; \\end{bmatrix} \\] Dan terakhir yang perlu kamu lakukan adalah menetukan adjoin matriksnya dengan cara mentranspose matriks kofaktor seperti pada contoh berikut. \\[ \\begin{bmatrix} \\;a_{11}\\; &amp; \\;d_{21}\\; &amp; \\;g_{31}\\; \\\\ \\;b_{12}\\; &amp; \\;e_{22}\\; &amp; \\;h_{32}\\;\\\\ \\;c_{13}\\; &amp; \\;f_{23}\\; &amp; \\;i_{33}\\; \\end{bmatrix} \\] 3.6 Invers Matriks 3.6.1 Apa itu Invers Matriks? Invers Matriks adalah sebuah kebalikan (invers) dari kedua matriks dimana apabila matriks tersebut dikalikan akan menghasilkan matriks persegi (\\(AB = BA = l_{n}\\)). Invers dilambangkan dengan tanda pangkat -1 setelah hurufnya . Invers Matriks sendiri dirumuskan dengan: \\[ A^{-1} = \\frac{1}{|\\; A \\;|}\\cdot adjA \\] 3.6.1.1 Menentukan Invers Matriks Dengan Ordo 2x2 \\(Rumus: \\;A^{-1} = \\frac{1}{|\\; A \\;|}\\cdot adjA\\) Contoh 1: \\(A = \\begin{bmatrix}\\;3\\; &amp; \\;7\\;\\\\ \\;8\\; &amp; \\;5\\;\\end{bmatrix}\\\\|\\;A\\;| = 3.5 - 8.7 = -41\\\\adjA = \\begin{bmatrix}\\;5\\; &amp; \\;-7\\;\\\\ \\;-8\\; &amp; \\;3\\;\\end{bmatrix}\\\\A^{-1} = \\frac{1}{-41}\\cdot \\begin{bmatrix}\\;5\\; &amp; \\;-7\\;\\\\ \\;-8\\; &amp; \\;3\\; \\end{bmatrix}\\\\= \\begin{bmatrix}\\;0.1219512\\; &amp; \\;0.17073171\\; \\\\\\;0.1951220\\; &amp; \\;0.07317073\\;\\end{bmatrix}\\) Contoh 2: \\(A = \\begin{bmatrix}\\;2\\; &amp; \\;1\\;\\\\ \\;4\\; &amp; \\;3\\;\\end{bmatrix}\\\\|\\;A\\;| = 2.3 - 4.1 = 2\\\\adjA = \\begin{bmatrix}\\;3\\; &amp; \\;-1\\;\\\\ \\;-4\\; &amp; \\;2\\;\\end{bmatrix}\\\\A^{-1} = \\frac{1}{2}\\cdot \\begin{bmatrix}\\;3\\; &amp; \\;-1\\;\\\\ \\;-4\\; &amp; \\;2\\; \\end{bmatrix}\\\\= \\begin{bmatrix}\\;1.5\\; &amp; \\;-0.5\\; \\\\\\;2\\; &amp; \\;1\\;\\end{bmatrix}\\) 3.6.1.2 Menentukan Invers Matriks Dengan Ordo 3x3 \\(Rumus: \\;A^{-1} = \\frac{1}{|\\; A \\;|}\\cdot adjA\\) \\(A = \\begin{bmatrix}\\;2\\; &amp; \\;-2\\; &amp; \\;4\\;\\\\ \\;1\\; &amp; \\;5\\; &amp; \\;-4\\;\\\\ \\;-3\\; &amp; \\;4\\; &amp; \\;1\\;\\end{bmatrix}\\\\|\\;A\\;| = \\begin{bmatrix}\\;2\\; &amp; \\;-2\\; &amp; \\;4\\;\\\\ \\;1\\; &amp; \\;5\\; &amp; \\;-4\\;\\\\ \\;-3\\; &amp; \\;4\\; &amp; \\;1\\;\\end{bmatrix}\\begin{matrix}2 &amp; -2\\\\ 1 &amp; 5\\\\ -3 &amp; 4\\end{matrix}\\\\= (2.5.1 + -2.-4.-3+4.1.4)\\\\= (10 + -24 + 16) - (-60 + -32 + -2)\\\\= (2) - (-94) = 96\\) \\(adjA = \\begin{bmatrix}\\;2\\; &amp; \\;-2\\; &amp; \\;4\\;\\\\ \\;1\\; &amp; \\;5\\; &amp; \\;-4\\;\\\\ \\;-3\\; &amp; \\;4\\; &amp; \\;1\\;\\end{bmatrix}\\) \\(=\\;\\begin{bmatrix}\\begin{bmatrix}\\;\\begin{bmatrix}\\; 2_{11} \\;\\end{bmatrix} &amp; \\;b\\; &amp; c\\;\\\\ \\;d &amp; \\;{\\color{Red} 5}\\; &amp; {\\color{Red} -4}\\;\\\\ \\;g &amp; \\;{\\color{Red} 4}\\; &amp; {\\color{Red} 1}\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;a &amp; \\;\\begin{bmatrix}\\; -2_{12} \\;\\end{bmatrix}\\; &amp; c\\;\\\\ \\;{\\color{Red} 1} &amp; \\;e\\; &amp; {\\color{Red} -4}\\;\\\\ \\;{\\color{Red} -3} &amp; \\;h\\; &amp; {\\color{Red} 1}\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;a &amp; \\;b\\; &amp; \\begin{bmatrix}\\; c_{13} \\;\\end{bmatrix}\\;\\\\ \\;{\\color{Red} 1} &amp; \\;{\\color{Red} 5}\\; &amp; f\\;\\\\ \\;{\\color{Red} -3} &amp; \\;{\\color{Red} 4}\\; &amp; i\\;\\end{bmatrix}\\\\ \\begin{bmatrix}\\;a &amp; \\;{\\color{Red} -2}\\; &amp; {\\color{Red} 4}\\;\\\\ \\;\\begin{bmatrix}\\; 1_{21} \\;\\end{bmatrix} &amp; \\;e\\; &amp; f\\;\\\\ \\;g &amp; \\;{\\color{Red} 5}\\; &amp; {\\color{Red} 1}\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;{\\color{Red} 2} &amp; \\;b\\; &amp; {\\color{Red} 4}\\;\\\\ \\;d &amp; \\;\\begin{bmatrix}\\; 5_{22} \\;\\end{bmatrix}\\; &amp; f\\;\\\\ \\;{\\color{Red} -3} &amp; \\;h\\; &amp; {\\color{Red} 1}\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;{\\color{Red} 2} &amp; \\;{\\color{Red} -2}\\; &amp; c\\;\\\\ \\;d &amp; \\;e\\; &amp; \\begin{bmatrix}\\; -4_{23} \\;\\end{bmatrix}\\;\\\\ \\;{\\color{Red} -3} &amp; \\;{\\color{Red} 4}\\; &amp; i\\;\\end{bmatrix}\\\\ \\begin{bmatrix}\\;a &amp; \\;{\\color{Red} -2}\\; &amp; {\\color{Red} 4}\\;\\\\ \\;d &amp; \\;{\\color{Red} 5}\\; &amp; {\\color{Red} -4}\\;\\\\ \\;\\begin{bmatrix}\\; -3_{31} \\;\\end{bmatrix} &amp; \\;h\\; &amp; i\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;{\\color{Red} 2} &amp; \\;b\\; &amp; {\\color{Red} 4}\\;\\\\ \\;{\\color{Red} 1} &amp; \\;e\\; &amp; {\\color{Red} -4}\\;\\\\ \\;g &amp; \\;\\begin{bmatrix}\\; 4_{32} \\;\\end{bmatrix}\\; &amp; i\\;\\end{bmatrix} &amp; \\begin{bmatrix}\\;{\\color{Red} 2} &amp; \\;{\\color{Red} -2}\\; &amp; c\\;\\\\ \\;{\\color{Red} 1} &amp; \\;{\\color{Red} 5}\\; &amp; f\\;\\\\ \\;g &amp; \\;h\\; &amp; \\begin{bmatrix}\\; 1_{33} \\;\\end{bmatrix}\\;\\end{bmatrix}\\end{bmatrix}\\) \\(=\\begin{bmatrix}\\;+\\; \\begin{vmatrix}\\;5 &amp; -4\\;\\\\ \\;4 &amp; 1\\;\\end{vmatrix} &amp; \\;-\\;\\begin{vmatrix}\\;1 &amp; -4\\;\\\\ \\;-3 &amp; 1\\;\\end{vmatrix} &amp; \\;+\\;\\begin{vmatrix}\\;1 &amp; 5\\;\\\\ \\;-3 &amp; 4\\;\\end{vmatrix}\\\\ \\;-\\;\\begin{vmatrix}\\;-2 &amp; 4\\;\\\\ \\;5 &amp; 1\\;\\end{vmatrix} &amp; \\;+\\; \\begin{vmatrix}\\;2 &amp; 4\\;\\\\ \\;-3 &amp; 1\\;\\end{vmatrix}&amp; \\;-\\;\\begin{vmatrix}\\;2 &amp; -2\\;\\\\ \\;-3 &amp; 4\\;\\end{vmatrix}\\\\ \\;+\\; \\begin{vmatrix}\\;-2 &amp; 4\\;\\\\ \\;5 &amp; -4\\;\\end{vmatrix} &amp; \\;-\\;\\begin{vmatrix}\\;2 &amp; 4\\;\\\\ \\;1 &amp; -4\\;\\end{vmatrix} &amp; \\;+\\;\\begin{vmatrix}\\;2 &amp; -2\\;\\\\ \\;1 &amp; 5\\;\\end{vmatrix}\\end{bmatrix}^{T}\\) \\(=\\begin{bmatrix}\\;(5.1 - (-4.4))\\; &amp; \\;(1.1 - (-4.-3))\\; &amp; \\;(1.4-5.-3)\\;\\\\ \\;((-2.1) - 4.5)\\; &amp; \\;(2.1 - 4. -3)\\; &amp; \\;(2.4-(-2.-3))\\;\\\\ \\;((-2.-4) -4.5)\\; &amp; \\;(2.-4-4.1)\\; &amp; \\;(2.5-(-2.1))\\;\\end{bmatrix}^{T}\\) \\(=\\begin{bmatrix}\\;(5-(16))\\; &amp; \\;(1-12)\\; &amp; \\;(4-(-15))\\;\\\\ \\;((-2)-20)\\; &amp; \\;(2-(-12))\\; &amp; \\;(8-6)\\;\\\\ \\;((8-20)\\; &amp; \\;(-8-4)\\; &amp; \\;(10-(-2))\\;\\end{bmatrix}^{T}\\) \\(= \\begin{bmatrix}\\;21\\; &amp; \\;-11\\; &amp; \\;19\\;\\\\ \\;22\\; &amp; \\;14\\; &amp; \\;2\\;\\\\ \\;-12\\; &amp; \\;-12\\; &amp; \\;12\\;\\end{bmatrix}^{T}\\\\= \\begin{bmatrix}\\;-3\\; &amp; \\;22\\; &amp; \\;12\\;\\\\ \\;-11\\; &amp; \\;14\\; &amp; \\;12\\;\\\\ \\;-19\\; &amp; \\;2\\; &amp; \\;12\\;\\end{bmatrix}^{T}\\\\\\) \\(= \\begin{bmatrix}\\;21\\; &amp; \\;-11\\; &amp; \\;19\\;\\\\ \\;22\\; &amp; \\;14\\; &amp; \\;2\\;\\\\ \\;-12\\; &amp; \\;-12\\; &amp; \\;12\\;\\end{bmatrix}^{T}\\\\= \\begin{bmatrix}\\;-3\\; &amp; \\;22\\; &amp; \\;12\\;\\\\ \\;-11\\; &amp; \\;14\\; &amp; \\;12\\;\\\\ \\;-19\\; &amp; \\;2\\; &amp; \\;12\\;\\end{bmatrix}^{T}\\\\A^{-1} = \\frac{1}{96}\\cdot \\begin{bmatrix}\\;-3\\; &amp; \\;22\\; &amp; \\;-12\\;\\\\ \\;-11\\; &amp; \\;14\\; &amp; \\;-12\\;\\\\ \\;19\\; &amp; \\;2\\; &amp; \\;-12\\;\\end{bmatrix}\\\\=\\begin{bmatrix}\\;0.2187500\\; &amp; \\;0.18750000\\; &amp; \\;-0.125\\;\\\\ \\;0.1145833\\; &amp; \\;0.14583333\\; &amp; \\;0.125\\;\\\\ \\;0.1979167\\; &amp; \\;-0.02083333\\; &amp; \\;0.125\\;\\end{bmatrix}\\) 3.6.2 Inverse Matriks Dalam Bahasa R Untuk mencari nilai invers dalam bahasa r, kita bisa menggunakan fungsi solve(), berikut adalah contoh penggunaannya. &gt; x &lt;- matrix(c(2, 1, 5, 3), 2, 2) &gt; solve(x) [,1] [,2] [1,] 3 -5 [2,] -1 2 3.7 Solusi Persamaan Linear Dengan Matriks Matriks dapat digunakan untuk menyelesaikan suatu sistem persamaan linear baik itu spldv atau spltv. Untuk menentukan solusi penyelesaian dari sistem linear dalam matriks kita bisa menggunakan rumus sebagai berikut. \\(AX = B\\\\ \\\\ dimana\\\\ \\\\ X = A^{-1}.B\\) Berikut adalah contoh pengaplikasian rumus diatas: \\[ AX = B \\rightarrow\\begin{bmatrix} \\;3\\; &amp; \\;2\\;\\\\ \\;1\\; &amp; \\;-2\\; \\end{bmatrix}\\begin{bmatrix} \\;x\\; \\\\ \\;y\\; \\end{bmatrix} \\begin{bmatrix} \\;14\\; \\\\ \\;2\\; \\end{bmatrix}\\\\ \\\\ X = A^{-1}.B \\rightarrow\\begin{bmatrix} \\;x\\; \\\\ \\;y\\; \\end{bmatrix} \\begin{bmatrix} \\;-2\\; &amp; \\;-2\\;\\\\ \\;-1\\; &amp; \\;3\\; \\end{bmatrix}\\begin{bmatrix} \\;14\\; \\\\ \\;2\\; \\end{bmatrix} \\\\ = \\frac{1}{-8} \\begin{bmatrix} \\;-32\\; \\\\ \\;-8\\; \\end{bmatrix} \\\\ = \\begin{bmatrix} \\;4\\; \\\\ \\;1\\; \\end{bmatrix}\\\\ \\therefore \\begin{Bmatrix} \\begin{matrix} x = 4\\\\ y = 1 \\end{matrix} &amp; \\rightarrow &amp; \\begin{matrix} 3(4) + 2(1)=14\\\\ 4-2)1=2 \\end{matrix} \\end{Bmatrix} \\] 3.7.1 Solusi Persamaan Linear Dengan Bahasa R Untuk mencari solusi dari sebuah persamaan linear, dalam bahasa r kita harus menggunakan third party packages yaitu pracma. Ketikkan kode berikut di r console untuk melakukan instalasi: Install.packages(pracma). Setelah berhasil melakukan instalasi terhadap package Pracma, sekarang selanjutnya adalah menggunakannya . Untuk menggunakan package ini kamu harus memanggil package ini terlebih dahulu di r studio / r console dengan menuliskan library(pracma). Untuk melakukan operasi persamaan linear dengan pracma adalah ubah bentuk dari persamaan linear yang akan kamu tentukan solusinya kedalam bentuk matriks. Penulis akan menggunakan sistem persamaan berikut sebagai contoh pada bagian ini. \\[2x \\;+\\; y \\;= \\;1\\\\3x \\;+\\; 4y\\; = \\;14\\] Untuk mencari solusi penyelesaian dari sistem persamaan tersebut. Untuk menentukan solusi dari persamaanya kita bisa menggunakan fungsi rref(), berikut adalah contoh penggunaannya. &gt; library(pracma) &gt; spldv &lt;- matrix(c(2, 1, 1, 3, 4, 14), 2, 3) &gt; rref(spldv) [,1] [,2] [,3] [1,] 1 0 -0.4 [2,] 0 1 4.8 "],["factor.html", "Chapter 4 Factor 4.1 Apa itu Factor? 4.2 Membuat dan Menampilkan Factor", " Chapter 4 Factor 4.1 Apa itu Factor? Factor merupakan tipe data yang digunakan untuk mengelola data yang banyak untuk mengetahui level - level atau kategori yang ada pada data tersebut. Factor digunakan untuk mengetahui data  data apa saja yang terdapat dalam sebuah variabel yang berisi banyak data. Factor berguna untuk mengetahui kategori dari data terutama jika nilai yang ada data tersebut beberapa ada yang sama. 4.2 Membuat dan Menampilkan Factor Untuk membuat atau menggunakan factor kita bisa menggunakan fungsi factor() seperti pada contoh berikut. &gt; x &lt;- c(&#39;Satu&#39;, &#39;Dua&#39;, 3, 4, 4, &#39;Satu&#39;, &#39;Satu&#39;, &#39;Dua&#39;) &gt; factor(x) [1] Satu Dua 3 4 4 Satu Satu Dua Levels: 3 4 Dua Satu "],["data-frame.html", "Chapter 5 Data Frame 5.1 Apa itu Data Frame? 5.2 Membuat dan Menampilkan Data Frame", " Chapter 5 Data Frame 5.1 Apa itu Data Frame? Data Frame merupakan tipe data yang digunakan untuk menyimpan data dalam bentuk data tabular atau tabel. 5.2 Membuat dan Menampilkan Data Frame Untuk membuat Data Frame kita bisa menggunakan fungsi data.frame() yang memiliki format penulisan seperti berikut. Keterangan: Data, merupakan data yang akan ada di data frame, data ini bisa berupa nama kolom, data yang ingin dimasukkan ke data frame. Data pada data frame biasanya diambil dari sebuah variabel. &gt; x &lt;- c(1, 2, 3) &gt; y &lt;- c(&#39;kyle&#39;, &#39;max&#39;, &#39;kim&#39;) &gt; data_frame &lt;- data.frame(x,y, stringsAsFactors = FALSE) &gt; data_frame x y 1 1 kyle 2 2 max 3 3 kim "],["list.html", "Chapter 6 List 6.1 Apa itu List? 6.2 Membuat dan Menampilkan List", " Chapter 6 List 6.1 Apa itu List? List merupakan tipe data yang dapat digunakan untuk menyimpan banyak objek, bahkan list dapat menampung beberapa tipe data yang berbeda dalam satu objek. 6.2 Membuat dan Menampilkan List Untuk membuat list kita bisa menggunakan fungsi list(). Berikut adalah contoh penggunaannya. &gt; x = 123 &gt; y &lt;- c(456) &gt; list_data &lt;- list(x, y) "],["array.html", "Chapter 7 Array 7.1 Apa itu Array? 7.2 Membuat dan Menampilkan Array", " Chapter 7 Array 7.1 Apa itu Array? Array merupakan tipe data yang pada dasarnya mirip dengan matriks. Array memiliki dimensi yang lebih luas dibandingkan matriks, dimana dimensi matriks hanya n × n sedangkan array memiliki dimensi n × n × n  x n yang serupa dengan tensor. 7.2 Membuat dan Menampilkan Array Untuk membuat array kita bisa menggunakan fungsi array(). Data yang terdapat pada array dapat kita isi dengan angka - angka random tanpa menggunakan tipe data seperti vektor. Kita juga dapat mengatur berapa jumlah dimensi dari sebuah data yang ada pada sebuah array. Berikut adalah contoh penggunaan dari fungsi array(). &gt; array &lt;- array(1:27, dim = c(3, 3, 3)) &gt; array , , 1 [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 , , 2 [,1] [,2] [,3] [1,] 10 13 16 [2,] 11 14 17 [3,] 12 15 18 , , 3 [,1] [,2] [,3] [1,] 19 22 25 [2,] 20 23 26 [3,] 21 24 27 Keterangan: 1:27 pada contoh diatas merupakan range angka yang digunakan untuk mengisi data pada sebuah array. Pada contoh diatas range angka yang dipakai adalah dari angka 1 sampai angka 27. dim pada contoh diatas merupakan yang mengatur berapa dimensi kita dimensi dari sebuah array. Pada contoh diatas dimensi pada arraynya diatur menjadi 3 dimensi dan datanya sendiri dibagi menjadi 3 bagian. "],["pengkondisian.html", "Chapter 8 Pengkondisian 8.1 Apa itu Pengkondisian? 8.2 Jenis - Jenis Pengkondisian", " Chapter 8 Pengkondisian 8.1 Apa itu Pengkondisian? Pengkondisian merupakan baris kode pada bahasa r yang bisa membuat kode yang kita berjalan sesuai kondisi yang diterapkan. Jika kita menggunakan pengkondisian maka output dari kode yang kita tulis dalam eksekusi akan mengikuti kondisi yang ada disebuah pengkondisian. Berikut adalah contoh dari penggunaan pengkondisian. Pada contoh diatas diperlihatkan contoh dari salah satu bentuk pengkondisian yaitu if. Pada contoh tersebut, ketika hendak akan ditampilkan variabel x otomatis akan masuk ke blok kode pengkondisian if karena dalam blok kode pengkodisian if kita sudah mengatur bahwa akan dilakukan pengecekan apakah variabel x bernilai lebih dari 10 jika ya maka akan isi dari variabel x akan ditampilkan dan jika tidak maka isi dari variabel x tidak akan ditampilkan. 8.2 Jenis - Jenis Pengkondisian 8.2.1 IF IF merupakan jenis pengkondisian yang akan menampilkan output apabila kondisi yang ada didalam if sudah terpenuhi. berikut adalah bentuk umum dari if. kondisi pada if biasanya berupa pengecekan terhadap sebuah variabel. Salah satu contohnya adalah seperti yang ada pada kode berikut. &gt; x = 5 &gt; &gt; if(x &lt; 10) { + print(&quot;Hello, World!&quot;) + } [1] &quot;Hello, World!&quot; Pada kode diatas pengecekan yang dilakukan oleh if adalah mengecek apakah nilai dari variabel x kurang dari 10, jika ya maka akan tampil tulisan Hello, World! dan jika tidak maka tidak akan tampil apa - apa. 8.2.2 IF - ELSE IF - ELSE merupakan pengkondisian yang dimana jika kondisi pada if tidak terpenuhi. Berikut adalah contoh dari penggunaan if - else. &gt; x = 5 &gt; &gt; if(x &gt; 10) { + print(&quot;Hello, World!&quot;) + } else { + print(&quot;Variabel Tidak Bernilai Lebih Dari 10&quot;) + } [1] &quot;Variabel Tidak Bernilai Lebih Dari 10&quot; Pada contoh diatas dapat dipahami bahwa jika kondisi pada if tidak terpenuhi maka selanjutnya akan dieksekusi baris kode yang ada pada else yang dimana akan menampilkan tulisan berupa Variabel Tidak Bernilai Lebih Dari 10. 8.2.3 IF - ELSE IF - ELSE IF - ELSE IF - ELSE merupakan bentuk pengkondisian dimana jika if tidak terpenuhi maka selanjutnya akan dieksekusi baris kode pada else if yang memiliki kondisi yang berbeda dengan if dan jika kondisi pada else if tidak terpenuhi maka selanjutnya dieksekusi kode else if lainnya sampai akhirnya jika semua kondisi pada else if tidak terpenuhi maka kode pada else akhirnya akan dieksekusi. Dalam sebuah blok kode pengkondisian kita memasukkan lebih dari 1 else if. Jika semua kondisi pada else if dan if tidak terpenuhi maka akan dieksekusi baris kode yang ada pada else. berikut adalah contoh penggunaannya. &gt; x = 5 &gt; &gt; if(x &gt; 6) { + print(&quot;Hello, World!&quot;) + } else if(x &gt; 7) { + print(&quot;Hello, World!&quot;) + } else if(x &gt; 8) { + print(&quot;Hello, World!&quot;) + } else if(x &gt; 9) { + print(&quot;Hello, World!&quot;) + } else { + print(&quot;Variabel x tidak bernilai lebih dari 5&quot;) + } [1] &quot;Variabel x tidak bernilai lebih dari 5&quot; Pada contoh diatas dapat dipahami jika setiap kondisi pada if dan else if tidak terpenuhi maka baris kode yang akan dieksekusi adalah baris kode pada else. Else bisa disebut juga sebagai jalan terakhir dalam sebuah blok kode pengkondisian dimana kode pada else hanya akan dieksekusi apabila kondisi pada if atau else if tidak terpenuhi. "],["pengungalan.html", "Chapter 9 Pengungalan 9.1 Apa itu Pengulangan? 9.2 Jenis - jenis pengulangan", " Chapter 9 Pengungalan 9.1 Apa itu Pengulangan? Pengulangan adalah sebuah blok kode yang digunakan untuk mengulangi beberapa baris kode dengan kondisi tertentu. Jika kondisi dalam sebuah pengulangan terpenuhi maka akan dilakukan sebuah pengulangan pada baris kode yang ingin diulangi berdasarkan kondisi yang ada pada blok kode pengulangan tersebut. 9.2 Jenis - jenis pengulangan 9.2.1 FOR For merupakan jenis pengulangan yang akan melakukan pengulangan jika sudah diketahui jumlahnya. For akan mengulangi baris kode yang sudah diketahui nilainya sejak awal. Berikut adalah contoh penggunaan pengulangan for. &gt; x = 1 &gt; for(x in 1:10) { + print(x) + } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 [1] 6 [1] 7 [1] 8 [1] 9 [1] 10 Pada pengulangan for kita bisa mendeklarasikan variabel yang ingin diulang didalam for ataupun diluar for itu sendiri.Pada contoh diatas digunakan range angka 1 sampai 10 yang bertujuan agar kode ketika ditampilkan akan melakukan perulangan dari angka 1 hingga angka 10. print(x) sendiri bertujuan agar ketika ditampilkan akan menghasilkan perulangan dari variabel x yang mana akan melakukan perulangan dari angka 1 hingga 10 yang menghasilkan output seperti pada contoh diatas. 9.2.2 WHILE While merupakan jenis pengulangan yang nilai awalnya tidak diketahui. Dikarenakan nilai awalnya tidak diketahui maka perlu dilakukan pengkondisian. Singkatnya while merupakan pengulangan yang akan berjalan jika kondisinya terpenuhi. Berikut adalah contoh penggunaan daripada while. &gt; x = 1 &gt; &gt; while( x &lt;= 5) { + print(x) + x = x + 1 + } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 Pada contoh diatas dapat dipahami bahwa while akan melakukan pengulangan jika kondisi yang terdapat didalam terpenuhi. Pada contoh diatas karena variabel bernilai kurang dari 5 maka akan dilakukan perulangan sebanyak 5 kali sesuai dengan kondisi terdapat didalam while. Kita juga perlu menambahkan x = x + 1 agar tidak terjadi infinity loop yang akan menghasilkan pengulangan yang tiada henti atau bisa disebut juga dengan infinity loop. "],["fungsi.html", "Chapter 10 Fungsi 10.1 Apa itu Fungsi? 10.2 Membuat dan Menampilkan Fungsi", " Chapter 10 Fungsi 10.1 Apa itu Fungsi? Fungsi merupakan satu blok kode yang melakukan tugas tertentu dan didalamnya berisi instruksi yang dieksekusi ketika dipanggil pada bagian lain dalam suatu program. Dalam bahasa r sendiri ada dua jenis fungsi yaitu built-in function dan fungsi yang kita buat sendiri. Built-in function merupakan fungsi yang sudah tersedia dalam bahasa r yang bisa kita pakai kapanpun dan dimanapun. 10.2 Membuat dan Menampilkan Fungsi Fungsi adalah hal yang sangat berguna dalam pemrograman terutama dalam bahasa r. Fungsi singkatnya adalah sekumpulan baris kode yang dapat digunakan kembali jika dipanggil. Fungsi memiliki format penulis seperti berikut. Dalam fungsi terdapat sesuatu yang disebut dengan argumen. Argumen merupakan input - input yang diperlukan oleh sebuah fungsi. Untuk lebih jelas perhatikan contoh berikut. &gt; fungsi_kuadrat &lt;- function(a, b) { + y &lt;- a^b + print(y) + } Pada contoh diatas dapat dipahami bahwa a dan b merupakan argumen dari fungsi yang ada pada contoh diatas. Pada contoh diatas variabel a dan b digunakan untuk melakukan operasi perpangkatan yang membutuhkan dua input yaitu variabel a dan b yang berada dalam variabel y. Ketika hendak menggunakan fungsi diatas kita perlu menuliskan fungsi_perpangkatan(2,3) yang dimana selanjutnya akan dilakukan operasi perpangkatan 2^3 yang menghasilkan output berupa angka 8. Kita juga bisa menuliskan fungsi tanpa argumen. Fungsi tanpa argumen biasanya digunakan untuk membuat fungsi yang tidak membutuhkan input apapun seperti pada contoh berikut. &gt; fungsi &lt;- function() { + print(&quot;Hello, World!&quot;) + } &gt; fungsi function() { print(&quot;Hello, World!&quot;) } "],["built-in-function-pada-bahasa-r.html", "Chapter 11 Built-in Function Pada Bahasa R 11.1 Apa itu Built-in Function 11.2 Fungsi - fungsi built-in function pada bahasa r", " Chapter 11 Built-in Function Pada Bahasa R 11.1 Apa itu Built-in Function Built-in function merupakan fungsi - fungsi yang sudah disediakan atau sudah ada secara default dalam bahasa r. 11.2 Fungsi - fungsi built-in function pada bahasa r 11.2.1 Fungsi Untuk Menampilkan Dataset Data() merupakan fungsi yang akan menampilkan list dari dataset yang ada di r. Terdapat lebih dari 100 dataset dalam bahasa r. Berikut adalah contoh penggunaan dari fungsi data(). &gt; data() 11.2.2 Fungsi yang berkaitan dengan file 11.2.2.1 Konversi Data Ke File 11.2.2.1.1 write.csv() Fungsi ini berguna untuk mengubah sebuah data yang dipisahkan oleh koma kedalam bentuk file csv (.csv). Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasiansintaks diatas terhadap dataset Titanic guna mengkonversi data tersebut kedalam bentuk file(.csv). 11.2.2.2 write.table() Fungsi ini berguna untuk mengubah sebuah data yang dipisahkan oleh tab kedalam bentuk file text (.txt). Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas terhadap dataset BOD guna mengkonversi data tersebut kedalam bentuk file(.txt). 11.2.3 Membaca File 11.2.3.1 read.csv() Fungsi ini berguna untuk membaca dan menampilkan file csv atau file dengan format .csv. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas terhadap dataset Titanic guna membaca dan menampilkan file tersebut. 11.2.3.2 read.table() Fungsi ini berguna untuk membaca dan menampilkan file text atau file dengan format .txt. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas terhadap dataset Titanic guna membaca dan menampilkan file tersebut. 11.2.4 Menampilkan Data 11.2.4.1 Head() Fungsi ini akan menampilkan data paling atas pada sebuah data. format penulisannya adalah sebagai berikut. contoh penggunaan daripada fungsi head(). &gt; head(iris, 2) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 11.2.4.2 Tail() Fungsi ini akan menampilkan data paling bawah pada sebuah data. Format penulisannya adalah sebagai berikut. contoh penggunaan daripada fungsi tail(). &gt; tail(iris, 2) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 149 6.2 3.4 5.4 2.3 virginica 150 5.9 3.0 5.1 1.8 virginica 11.2.5 Menampilkan Baris dan Kolom 11.2.5.1 Menampilkan Kolom Untuk menampilkan kolom x sampai dengan kolom y pada suatu data maka kita bisa menggunakan sintaks berikut. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; BOD[,1:2] Time demand 1 1 8.3 2 2 10.3 3 3 19.0 4 4 16.0 5 5 15.6 6 7 19.8 11.2.5.2 Menampilkan Baris Untuk menampilkan baris x sampai dengan baris y pada suatu data maka kita bisa menggunakan sintaks berikut. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; BOD[1:2,] Time demand 1 1 8.3 2 2 10.3 11.2.5.3 Menampilkan Baris dan Kolom Untuk menampilkan baris dan kolom sekaligus akan tetapi baris dan kolom tertentu saja maka kita bisa menggunakan sintaks berikut. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; BOD[1:1,1:2] Time demand 1 1 8.3 11.2.6 Menggabungkan Data 11.2.6.1 rbind() Fungsi ini digunakan untuk menggabungkan row atau baris dari sebuah data . Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; rbind(BOD[2:5,]) Time demand 2 2 10.3 3 3 19.0 4 4 16.0 5 5 15.6 11.2.6.2 cbind() Fungsi ini digunakan untuk menggabungkan column atau kolom dari sebuah data. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; cbind(BOD[2:5,1]) [,1] [1,] 2 [2,] 3 [3,] 4 [4,] 5 11.2.6.3 dim() dim() merupakan fungsi yang digunakan untuk mengetahui ukuran dimensi dari sebuah data. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; dim(BOD) [1] 6 2 11.2.6.4 names() names() merupakan fungsi yang digunakan untuk mengetahui nama  nama kolom yang ada disebuah data. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; names(BOD) [1] &quot;Time&quot; &quot;demand&quot; 11.2.6.5 str() str() merupakan fungsi yang digunakan untuk mengetahui struktur dari sebuah data. Berikut adalah format penulisannya. Berikut adalah contoh pengaplikasian sintaks diatas pada dataset BOD: &gt; str(BOD) &#39;data.frame&#39;: 6 obs. of 2 variables: $ Time : num 1 2 3 4 5 7 $ demand: num 8.3 10.3 19 16 15.6 19.8 - attr(*, &quot;reference&quot;)= chr &quot;A1.4, p. 270&quot; "],["fungsi-matematika-dan-statistika.html", "Chapter 12 Fungsi Matematika dan Statistika 12.1 Fungsi Matematika 12.2 Fungsi Statistika 12.3 summary()", " Chapter 12 Fungsi Matematika dan Statistika 12.1 Fungsi Matematika 12.1.1 Nilai Mutlak Nilai Mutlak atau Absolute Value adalah nilai suatu bilangan riil tanpa tanda plus atau minus. Nilai Mutlak sendiri dilambangkan dengan tanda | A |. Semua nilai yang ada di nilai mutlak akan bernilai positif walaupun itu bilangan negatif, bilangan tersebut akan bernilai positif jika diubah kebentuk nilai mutlak, | -x || x |. Definisi berikut akan menjelaskan bahwa nilai mutlak atau nilai absolut akan selalu bernilai positif atau nol, tetapi tidak akan pernah bernilai negatif. \\[\\left | x \\right | = \\left\\{\\begin{matrix} x, jika \\;x \\geq 0\\\\ -a, jika \\;x &lt; 0\\end{matrix}\\right.\\] Dalam bahasa r untuk mencari nilai mutlak kita bisa menggunakan fungsi abs(). Berikut adalah format penulisan dari fungsi tersebut. Berikut adalah contoh penggunaan daripada fungsi abs(): &gt; abs(-25) [1] 25 12.1.2 Logaritma Natural Logaritma Natural adalah logaritma yang memiliki basis atau berbasis pada bilangan e atau euler, dimana euler sendiri merupakan bilangan irasional yang bernilai 2,718281828(dan seterusnya). Logaritma natural sendiri dinotasikan denga ln. Disebut Logaritma Natural karena: Persamaan - persamaan yang variabelnya tidak diketahui merupakan pangkat dari e jauh lebih sering dijumpai dibanding yang merupakan pangkat 10 (Dikarenakan sifat - sifat persamaan eksponensial). Logaritma Natural dapat didefinisikan dengan mudah menggunakan integral dasar \\[ln(a) = \\int_{1}^{a}\\frac{1}{x}dx\\] atau bisa juga didefinisikan dengan menggunakan deret taylor \\[f(a) + \\frac{f^{&#39;}(a)}{1!}(x - a) + \\frac{f^{&#39;&#39;}(a)}{2!}(x - a) + ...\\] atau \\[\\sum_{n = 0}^{\\infty} \\frac{f^{n}(a)}{n!}(x - a)^n\\] Untuk melakukan operasi Logaritma Natural, dalam bahas r digunakan fungsi log(). Berikut adalah format penulisannya. Berikut adalah contoh penggunaan daripada fungsi log(). Contoh 1: &gt; log(25) [1] 3.218876 Contoh 2: &gt; log(exp(5)) [1] 5 Keterangan: exp() merupakan fungsi yang menampilkan nilai berupa bilangan e atau euler (2,718281828dan seterusnya). 12.1.3 Eksponensial Eksponensial merupakan fungsi di matematika yang ditulis dengan notasi exp(x)atau e^x, dimana e merupakan basis dari Logaritma Natural, yaitu 2,718281828(dan seterusnya). Dalam bahas r digunakan fungsi exp() untuk menampilkan nilai eksponen, format penulisannya adalah sebagai berikut. Berikut adalah contoh penggunaan daripada fungsi log(). &gt; exp(25) [1] 72004899337 12.1.4 Faktorial Faktorial merupakan hasil perkalian antara bilangan bulat positif yang kurang atau sama dengan n. Faktorial dituliskan sebagai n! dan disebut n faktorial. Berikut adalah bentuk umum daripada faktorial. \\(n! = n \\cdot (n - 1) \\cdot (n - 3) \\cdot 3 \\cdot 2 \\cdot 1\\) Contoh: \\(6! = 6 \\cdot 5 \\cdot 4 \\cdot 3 \\cdot 2 \\cdot 1\\) Dalam bahasa r untuk mencari nilai faktorial digunakan fungsi factorial(). Berikut adalah format penulisannya. Berikut adalah contoh penerapan daripada sintaks diatas. &gt; factorial(6) [1] 720 12.1.5 Akar Kuadrat Dengan r kita bisa mencari akar kuadrat dari sebuah nilai dengan fungsi sqrt(). berikut adalah format penulisannya. Berikut adalah contoh penerapan daripada sintaks diatas. &gt; sqrt(100) [1] 10 12.1.6 Pi Dalam Matematika Pi merupakan sebuah konstanta yang merupakan perbandingan keliling lingkaran dengan dimeternya dan memiliki nilai 3,134159265358979323846 . Pi sendiri dilambangkan dengan tanda . Dalam bahasa r, pi merupakan variabel khusus yang berisi nilai pi. Berikut adalah output yang akan ditampilkan jika memanggil pi (sebagai variabel) &gt; pi [1] 3.141593 12.1.7 Trigonometry 12.1.7.1 sin() Fungsi sin() digunakan untuk menentukan nilai sin. format penulisannya adalah sebagai berikut. Berikut adalah contoh penggunaannya. &gt; sin(90) [1] 0.8939967 12.1.7.2 cos() Fungsi cos() digunakan untuk menentukan nilai cos. format penulisannya adalah sebagai berikut. Berikut adalah contoh penggunaannya. &gt; cos(90) [1] -0.4480736 12.1.7.3 tan() Fungsi tan() digunakan untuk menentukan nilai tan. format penulisannya adalah sebagai berikut. Berikut adalah contoh penggunaannya. &gt; tan(90) [1] -1.9952 12.2 Fungsi Statistika 12.2.1 Mean Mean merupakan nilai rata  rata dari sebuah data. Mean dirumuskan sebagai berikut. \\(\\bar{X} = \\frac{x_{1}+x_{2}...+x_{n}}{n}\\) atau \\(\\bar{X} = \\frac{\\sum_{i = 0}^{a}X_{i}}{n}\\) Untuk mencari nilai mean kita bisa menggunakan fungsi mean(). Berikut adalah format penulisannya. Berikut adalah contoh penggunaan daripada sintaks diatas. &gt; mean(c(11,77,45,67,24,68,98)) [1] 55.71429 12.2.2 Median Median merupakan nilai tengah dari sebuah data. Median dirumuskan sebagai berikut. Jumlah Data Ganjil: \\(Me = x_{\\frac{1}{2}(n + 1)}\\) Jumlah Data Genap : \\(Me = \\frac{x\\tfrac{n}{2} + x(\\tfrac{n}{2}+ 1)}{2}\\) Untuk mencari nilai median kita bisa menggunakan fungsi median(). Berikut adalah format penulisannya . Berikut adalah contoh penggunaan daripada sintaks diatas. &gt; median(c(11,77,45,67,24,68,98)) [1] 67 12.2.3 Standard Deviasi Standard Deviasi adalah ukuran sebaran statistik yang mengukur nilai  nilai data terbesar. Fungsi sd() merupakan fungsi yang digunakan untuk menentukan standard deviasi dari sebuah data. Berikut adalah format penulisannya dalam bahasa r. Berikut adalah contoh penggunannya: &gt; sd(c(11,77,45,67,24,68,98)) [1] 30.65787 12.2.4 Penyortiran Data Untuk melakukan penyortiran data kita bisa menggunakan fungsi sort(). Berikut adalah format penulisannya. Berikut adalah contoh penggunannya: &gt; sort(c(11,77,45,67,24,68,98)) [1] 11 24 45 67 68 77 98 12.3 summary() summary() merupakan fungsi yang akan menampilkan rangkuman data. Rangkuman tersebut berisi informasi seperti nilai mean, median, kuartil, nilai maksimum, nilai minimum, dan sebagainya. Berikut adalah format penulisannya. Berikut ini adalah contoh penggunaannya terhadap dataset BOD guna mendapatkan rangkuman data dari dataset tersebut. &gt; summary(BOD) Time demand Min. :1.000 Min. : 8.30 1st Qu.:2.250 1st Qu.:11.62 Median :3.500 Median :15.80 Mean :3.667 Mean :14.83 3rd Qu.:4.750 3rd Qu.:18.25 Max. :7.000 Max. :19.80 "],["visualisasi-data.html", "Chapter 13 Visualisasi Data 13.1 Plot 13.2 BarPlot 13.3 Histogram 13.4 Density Plot", " Chapter 13 Visualisasi Data Dalam bahas r kamu bisa memvisualisasikan sebuah data kedalam bentuk grafik seperti plot, barplot, pie, histogram, boxplot, density, dan sebagainya. Pada bab terakhir ini akan dibahas mengenai cara memvisualisasikan data kedalam bentuk grafik dengan menggunakan dataset yang sudah disediakan oleh bahasa r. 13.1 Plot Untuk memvisualisasikan data kedalam bentuk plot bisa menggunakan fungsi plot() yang mana format penulisannya adalah sebagai berikut. &gt; plot(density(BOD[,1])) Kamu juga bisa hanya memasukkan satu objek saja pada saat menggunakan plot. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. 13.2 BarPlot Untuk memvisualisasikan data kedalam bentuk barplot bisa menggunakan fungsi barplot() yang mana format penulisannya adalah sebagai berikut . Jika horiz diisi dengan value TRUE maka grafik bar plot akan menjadi vertikal dan sebaliknya, jika horiz diisi dengan value FALSE maka grafik bar plot akan menjadi horizontal. Horiz merupakan singkatan Horizontal. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD di kolom Time (Kolom pertama dari dataset BOD) untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. Secara Horizontal &gt; barplot(BOD[,1], horiz=TRUE) Secara Vertikal &gt; barplot(BOD[,1], horiz=FALSE) ##BoxPlot Untuk memvisualisasikan data kedalam bentuk BoxPlot bisa menggunakan fungsi boxplot() yang mana format penulisannya adalah sebagai berikut. Kamu juga bisa hanya memasukkan satu objek saja pada saat menggunakan boxplot. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. &gt; boxplot(BOD) ##Pie Untuk memvisualisasikan data kedalam bentuk pie bisa menggunakan fungsi pie() yang mana format penulisannya adalah sebagai berikut. Kamu juga bisa hanya memasukkan satu objek saja pada saat menggunakan boxplot. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. &gt; pie(c(65,35),c(&quot;Programming&quot;, &quot;Math&quot;)) 13.3 Histogram Untuk memvisualisasikan data kedalam bentuk histogram bisa menggunakan fungsi hist() yang mana format penulisannya adalah sebagai berikut. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. &gt; hist(BOD[,1]) 13.4 Density Plot Untuk memvisualisasikan data kedalam bentuk Density kita bisa menggunakan fungsi plot(density()) yang mana format penulisannya adalah sebagai berikut. Berikut adalah contoh penerapan sintaks diatas pada dataset BOD untuk menampilkan data pada dataset tersebut kedalam bentuk grafik. &gt; plot(density(BOD[,1])) "],["daftar-pustaka.html", "Daftar Pustaka", " Daftar Pustaka https://en.wikipedia.org/ https://cran.r-project.org/manuals.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
